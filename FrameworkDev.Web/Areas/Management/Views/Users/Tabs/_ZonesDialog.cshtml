@using Kendo.Mvc.UI
@using FrameworkDev.Web.Helpers.KendoMVC
@using FrameworkDev.Web.Areas.BaseInfo.Models;

@{
    /**/

    ViewBag.Title = "مناطق ";
}

@(Html.Kendo().Grid<VM_ZoneInfo>
            ()
            .Name("ZoneGrid")
            .Columns(columns =>

            {
                columns.Select().Width(50);
                columns.Bound(c => c.ZoneId).Width(110);
                columns.Bound(c => c.Name).Width(110);
            })
                          .Scrollable(x => x.Enabled(true).Height(370).Virtual(true))
                        .PersistSelection()
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .Model(model => model.Id(p => p.ZoneId))
                        .Read(read => read.Action("GetZonesDifferenceList", "Zones", new { area = "BaseInfo" }).Data("additionalDataUser"))
    )
)

































@*@using Kendo.Mvc.UI
    @using TIS.Web.Helpers.KendoMVC
    @using TIS.Web.Areas.BaseInfo.Models;
    @{
        /**/

        /**/

        /**/

        /**/

        /**/

        ViewBag.Title = "مناطق ";

    }
    @(Html.Kendo().Button()
                                                                                   .Name("button_add_zone")
                                                                                   .HtmlAttributes(new { type = "button" })
                                                                                   .Icon("add")
                                                                                   .Content("انتخاب منطقه")
                                                                                   .Events(ev => ev.Click("getZoneGridCheckedItems")))

    @(Html.Kendo().Grid<VM_ZoneInfo>
            ()
            .Name("ZoneGrid")
            .Columns(columns =>
            {
                columns.Select().Width(50);
                                            //columns.Bound(c => c.IsSelected).ClientTemplate("<input type='checkbox' #= IsSelected ? checked='checked' :'' # />");
                                            //columns.Bound(c => c.IsSelected).ClientTemplate("#if (IsSelected) {#<span class='label label-success'>فعال</span>#} else {#<span class='label label-danger'>غیرفعال</span>#}#").Width(50);
                                            columns.Bound(c => c.ZoneId).Width(110);
                columns.Bound(c => c.Name).Width(110);
            })
                  //    .Selectable(s => s.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
                  // .Events(events => events.Change("grid_onChange"))
                  .Pageable()
                  .Sortable()
                  .PersistSelection()




              .DataSource(dataSource => dataSource
              .Ajax()
              .Model(model => model.Id(p => p.ZoneId))
                  .Read(read => read.Action("GetZonesDifferenceList", "Zone", new { area = "BaseInfo" }).Data("additionalDataUserInsUpd"))
          //.Create(create => create.Action("AddZoneSave", "UserZones", new { area = "BaseInfo" }).Data("additionalDataUserInsUpd"))
          //.Update(update => update.Action("EditZoneSave", "UserZones", new { area = "BaseInfo" }))
          //.Destroy(destroy => destroy.Action("DeleteZoneSave", "UserZones", new { area = "BaseInfo" }))
          //.Events(events => events.Error("function(args){telerikGridAjaxErrorhandler(args,'ZoneGrid');}"))

          )
    )




    <script type="text/kendo-template" id="GridErrorMessage">
        <div class="k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error" style="margin: 0.5em; display: block; " data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
            <span class="k-icon k-warning"></span>#=message#<div class="k-callout k-callout-n"></div>
        </div>
    </script>

    <script type="text/javascript">

        var validationMessageTmpl = kendo.template($("#GridErrorMessage").html());

        function telerikGridAjaxErrorhandler(args, myGridId) {
            if (args.errors) {
                var grid = $("#" + myGridId).data("kendoGrid");
                grid.one("dataBinding", function (e) {
                    e.preventDefault();   // cancel grid rebind if error occurs

                    for (var error in args.errors) {
                        showMessage(grid.editable.element, error, args.errors[error].errors);
                    }
                });
            }
        }

        function showMessage(container, name, errors) {
            //add the validation message to the form
            container.find("[data-valmsg-for=" + name + "],[data-val-msg-for=" + name + "]")
                .replaceWith(validationMessageTmpl({ field: name, message: errors[0] }))
        }

        function onRequestEnd(e) {
            //if (compareDate <= 0)


            if (e.response) {
                if (e.type === 'create') {
                    Alert('fa fa-smile-o', 'موفق', '  با موفقیت ثبت شد', 'green', '', null);
                }
                else if (e.type === 'update') {
                    Alert('fa fa-smile-o', 'موفق', ' با موفقیت ویرایش شد', 'green', '', null);
                }
            }
        }

            //var compareDate;
            //function onRequestStart(e) {
            //    var data = this.dataItem(this.select());
            //    compareDate = calcDuration2ShamsiDate(data.StartDate, data.EndDate);
            //    Alert('fa fas fa-exclamation-triangle', 'اخطار', 'یك ' + entityTitle + ' را انتخاب كنید', 'red', '', null);
            //}






    </script>*@
