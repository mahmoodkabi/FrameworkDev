//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrameworkDev.Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FrameworkDevEntities : DbContext
    {
        public FrameworkDevEntities()
            : base("name=FrameworkDevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BaseInfo> BaseInfoes { get; set; }
        public virtual DbSet<BookMark> BookMarks { get; set; }
        public virtual DbSet<CodeFile> CodeFiles { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<MapRequest> MapRequests { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<RequestLog> RequestLogs { get; set; }
        public virtual DbSet<RequestParaph> RequestParaphs { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<RequestSignature> RequestSignatures { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<SubSystem> SubSystems { get; set; }
        public virtual DbSet<TableName> TableNames { get; set; }
        public virtual DbSet<TBL_UserUnits> TBL_UserUnits { get; set; }
        public virtual DbSet<TBL_UserZones> TBL_UserZones { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WorkFlowStep> WorkFlowSteps { get; set; }
        public virtual DbSet<WorkFlowType> WorkFlowTypes { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
        public virtual DbSet<UserLayer> UserLayers { get; set; }
        public virtual DbSet<UserLayerLineFeature> UserLayerLineFeatures { get; set; }
        public virtual DbSet<UserLayerPointFeature> UserLayerPointFeatures { get; set; }
        public virtual DbSet<UserLayerPolygonFeature> UserLayerPolygonFeatures { get; set; }
        public virtual DbSet<USERLAYERLINE> USERLAYERLINEs { get; set; }
        public virtual DbSet<USERLAYERPOINT> USERLAYERPOINTs { get; set; }
        public virtual DbSet<USERLAYERPOLYGON> USERLAYERPOLYGONs { get; set; }
    
        public virtual ObjectResult<sp_WorkDesk_Result> sp_WorkDesk(string userName, string type, string fromDate, string toDate)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkDesk_Result>("sp_WorkDesk", userNameParameter, typeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> sp_DocsAdd(string filename, byte[] filedata)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var filedataParameter = filedata != null ?
                new ObjectParameter("filedata", filedata) :
                new ObjectParameter("filedata", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_DocsAdd", filenameParameter, filedataParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_DocsDelete(Nullable<System.Guid> docId)
        {
            var docIdParameter = docId.HasValue ?
                new ObjectParameter("docId", docId) :
                new ObjectParameter("docId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_DocsDelete", docIdParameter);
        }
    
        public virtual ObjectResult<sp_UserLayer_Result> sp_UserLayer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLayer_Result>("sp_UserLayer");
        }
    
        public virtual ObjectResult<sp_InsertFeature_Result> sp_InsertFeature(string type, Nullable<int> userLayerShapeId, string featureName, string featureValue, Nullable<int> userId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userLayerShapeIdParameter = userLayerShapeId.HasValue ?
                new ObjectParameter("UserLayerShapeId", userLayerShapeId) :
                new ObjectParameter("UserLayerShapeId", typeof(int));
    
            var featureNameParameter = featureName != null ?
                new ObjectParameter("FeatureName", featureName) :
                new ObjectParameter("FeatureName", typeof(string));
    
            var featureValueParameter = featureValue != null ?
                new ObjectParameter("FeatureValue", featureValue) :
                new ObjectParameter("FeatureValue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertFeature_Result>("sp_InsertFeature", typeParameter, userLayerShapeIdParameter, featureNameParameter, featureValueParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_SearchInAllFeature_Result> sp_SearchInAllFeature(string strSearch, Nullable<int> userId, Nullable<int> page, Nullable<int> pageSize)
        {
            var strSearchParameter = strSearch != null ?
                new ObjectParameter("strSearch", strSearch) :
                new ObjectParameter("strSearch", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchInAllFeature_Result>("sp_SearchInAllFeature", strSearchParameter, userIdParameter, pageParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<sp_GetUserLayerShapeWithXY_Result> sp_GetUserLayerShapeWithXY(string shapeType, string strSHAPE, Nullable<int> userId)
        {
            var shapeTypeParameter = shapeType != null ?
                new ObjectParameter("ShapeType", shapeType) :
                new ObjectParameter("ShapeType", typeof(string));
    
            var strSHAPEParameter = strSHAPE != null ?
                new ObjectParameter("strSHAPE", strSHAPE) :
                new ObjectParameter("strSHAPE", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserLayerShapeWithXY_Result>("sp_GetUserLayerShapeWithXY", shapeTypeParameter, strSHAPEParameter, userIdParameter);
        }
    }
}
